module prelude where

open import level public
open import product public
open import product-thms public
open import sum public
open import empty public
open import unit public
open import functions renaming (id to id-set) public
open import eq public
open import list public
open import list-thms public
open import bool public
open import nat public
open import nat-thms public

-- Extensionality will be used when proving equivalences of morphisms.
postulate ext-set : ‚àÄ{l1 l2 : level} ‚Üí extensionality {l1} {l2}
-- These are isomorphisms, but Agda has no way to prove these as
-- equivalences.  They are consistent to adopt as equivalences by
-- univalence:
postulate ‚àß-unit : ‚àÄ{‚Ñì}{A : Set ‚Ñì} ‚Üí A ‚â° (‚ä§ {‚Ñì} ‚àß A)
postulate ‚àß-assoc : ‚àÄ{‚Ñì}{A B C : Set ‚Ñì} ‚Üí  (A ‚àß (B ‚àß C)) ‚â° ((A ‚àß B) ‚àß C)
postulate ‚àß-twist : ‚àÄ{‚Ñì}{A B : Set ‚Ñì} ‚Üí  (A ‚àß B) ‚â° (B ‚àß A)
-- Provable from the above axioms:
postulate assoc-twist‚ÇÅ : {A B C D : Set} ‚Üí ((A √ó C) √ó (B √ó D)) ‚â° ((A √ó B) √ó (C √ó D))

-- The following defines a commutative monoid as lists:
_* = ùïÉ

postulate *-comm : ‚àÄ{A : Set}{l‚ÇÅ l‚ÇÇ : A *} ‚Üí l‚ÇÅ ++ l‚ÇÇ ‚â° l‚ÇÇ ++ l‚ÇÅ

