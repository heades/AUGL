-----------------------------------------------------------------------
-- This file defines Degenerate Dial‚ÇÇ(Sets) and shows that it is a   --
-- CCC.                                                              --
-----------------------------------------------------------------------
module DeDial2Sets where

open import prelude

data UnitType : Set‚ÇÅ where  
  unit : UnitType
  mod : UnitType
  -- comp : UnitType ‚Üí UnitType ‚Üí UnitType

‚ü¶_‚üß : UnitType ‚Üí Set
‚ü¶ unit ‚üß = ‚ä§
‚ü¶ mod ‚üß = (‚ä§ *) √ó (‚ä§ *)
-- ‚ü¶ comp t‚ÇÅ t‚ÇÇ ‚üß = ‚ü¶ t‚ÇÅ ‚üß √ó ‚ü¶ t‚ÇÇ ‚üß

Obj‚ä§ : Set‚ÇÅ
Obj‚ä§ = Œ£[ U ‚àà Set ] (Œ£[ X ‚àà UnitType ](U ‚Üí ‚ü¶ X ‚üß ‚Üí Set))

Hom‚ä§ : Obj‚ä§ ‚Üí Obj‚ä§ ‚Üí Set
Hom‚ä§ (U , X , Œ±) (V , Y , Œ≤) =
  Œ£[ f ‚àà (U ‚Üí V) ]
    (Œ£[ F ‚àà  (‚ü¶ Y ‚üß ‚Üí ‚ü¶ X ‚üß) ] (‚àÄ{u : U}{y : ‚ü¶ Y ‚üß} ‚Üí Œ± u (F y) ‚Üí Œ≤ (f u) y))

comp‚ä§ : {A B C : Obj‚ä§} ‚Üí Hom‚ä§ A B ‚Üí Hom‚ä§ B C ‚Üí Hom‚ä§ A C
comp‚ä§ {(U , X , Œ±)} {(V , Y , Œ≤)} {(W , Z , Œ≥)} (f , F , p‚ÇÅ) (g , G , p‚ÇÇ) =
  (g ‚àò f , F ‚àò G , (Œª {u z} p-Œ± ‚Üí p‚ÇÇ (p‚ÇÅ p-Œ±)))

infixl 5 _‚óã‚ä§_

_‚óã‚ä§_ = comp‚ä§

-- The contravariant hom-functor:
Hom‚ä§‚Çê :  {A' A B B' : Obj‚ä§} ‚Üí Hom‚ä§ A' A ‚Üí Hom‚ä§ B B' ‚Üí Hom‚ä§ A B ‚Üí Hom‚ä§ A' B'
Hom‚ä§‚Çê f h g = comp‚ä§ f (comp‚ä§ g h)

-- The identity function:
id‚ä§ : {A : Obj‚ä§} ‚Üí Hom‚ä§ A A 
id‚ä§ {(U , X , Œ±)} = (id-set , id-set , id-set)


-- In this formalization we will only worry about proving that the
-- data of morphisms are equivalent, and not worry about the morphism
-- conditions.  This will make proofs shorter and faster.
--
-- If we have parallel morphisms (f,F) and (g,G) in which we know that
-- f = g and F = G, then the condition for (f,F) will imply the
-- condition of (g,G) and vice versa.  Thus, we can safly ignore it.
infix 4 _‚â°h‚ä§_

_‚â°h‚ä§_ : {A B : Obj‚ä§} ‚Üí (f g : Hom‚ä§ A B) ‚Üí Set
_‚â°h‚ä§_ {(U , X , Œ±)}{(V , Y , Œ≤)} (f , F , p‚ÇÅ) (g , G , p‚ÇÇ) = f ‚â° g √ó F ‚â° G

‚â°h‚ä§-refl : {A B : Obj‚ä§}{f : Hom‚ä§ A B} ‚Üí f ‚â°h‚ä§ f
‚â°h‚ä§-refl {U , X , Œ±}{V , Y , Œ≤}{f , F , _} = refl , refl

‚â°h‚ä§-trans : ‚àÄ{A B}{f g h : Hom‚ä§ A B} ‚Üí f ‚â°h‚ä§ g ‚Üí g ‚â°h‚ä§ h ‚Üí f ‚â°h‚ä§ h
‚â°h‚ä§-trans {U , X , Œ±}{V , Y , Œ≤}{f , F , _}{g , G , _}{h , H , _} (p‚ÇÅ , p‚ÇÇ) (p‚ÇÉ , p‚ÇÑ) rewrite p‚ÇÅ | p‚ÇÇ | p‚ÇÉ | p‚ÇÑ = refl , refl

‚â°h‚ä§-sym : ‚àÄ{A B}{f g : Hom‚ä§ A B} ‚Üí f ‚â°h‚ä§ g ‚Üí g ‚â°h‚ä§ f
‚â°h‚ä§-sym {U , X , Œ±}{V , Y , Œ≤}{f , F , _}{g , G , _} (p‚ÇÅ , p‚ÇÇ) rewrite p‚ÇÅ | p‚ÇÇ = refl , refl


‚â°h‚ä§-subst-‚óã : ‚àÄ{A B C : Obj‚ä§}{f‚ÇÅ f‚ÇÇ : Hom‚ä§ A B}{g‚ÇÅ g‚ÇÇ : Hom‚ä§ B C}{j : Hom‚ä§ A C}
  ‚Üí f‚ÇÅ ‚â°h‚ä§ f‚ÇÇ
  ‚Üí g‚ÇÅ ‚â°h‚ä§ g‚ÇÇ
  ‚Üí f‚ÇÇ ‚óã‚ä§ g‚ÇÇ ‚â°h‚ä§ j
  ‚Üí f‚ÇÅ ‚óã‚ä§ g‚ÇÅ ‚â°h‚ä§ j
‚â°h‚ä§-subst-‚óã {U , X , Œ±}
         {V , Y , Œ≤}
         {W , Z , Œ≥}
         {f‚ÇÅ , F‚ÇÅ , _}
         {f‚ÇÇ , F‚ÇÇ , _}
         {g‚ÇÅ , G‚ÇÅ , _}
         {g‚ÇÇ , G‚ÇÇ , _}
         {j , J , _}
         (p‚ÇÖ , p‚ÇÜ) (p‚Çá , p‚Çà) (p‚Çâ , p‚ÇÅ‚ÇÄ) rewrite p‚ÇÖ | p‚ÇÜ | p‚Çá | p‚Çà | p‚Çâ | p‚ÇÅ‚ÇÄ = refl , refl

‚óã‚ä§-assoc : ‚àÄ{A B C D}{f : Hom‚ä§ A B}{g : Hom‚ä§ B C}{h : Hom‚ä§ C D}
  ‚Üí f ‚óã‚ä§ (g ‚óã‚ä§ h) ‚â°h‚ä§ (f ‚óã‚ä§ g) ‚óã‚ä§ h
‚óã‚ä§-assoc {U , X , Œ±}{V , Y , Œ≤}{W , Z , Œ≥}{S , T , Œπ}
        {f , F , _}{g , G , _}{h , H , _} = refl , refl


‚óã‚ä§-idl : ‚àÄ{A B}{f : Hom‚ä§ A B} ‚Üí id‚ä§ ‚óã‚ä§ f ‚â°h‚ä§ f
‚óã‚ä§-idl {U , X , _}{V , Y , _}{f , F , _} = refl , refl


‚óã‚ä§-idr : ‚àÄ{A B}{f : Hom‚ä§ A B} ‚Üí f ‚óã‚ä§ id‚ä§ ‚â°h‚ä§ f
‚óã‚ä§-idr {U , X , _}{V , Y , _}{f , F , _} = refl , refl

_‚äó·µ£_ : ‚àÄ{U V : Set}{X Y : UnitType} ‚Üí (Œ± : U ‚Üí ‚ü¶ X ‚üß ‚Üí Set) ‚Üí (Œ≤ : V ‚Üí ‚ü¶ Y ‚üß ‚Üí Set) ‚Üí Œ£ U (Œª x ‚Üí V) ‚Üí Œ£ ‚ü¶ X ‚üß (Œª x ‚Üí ‚ü¶ Y ‚üß) ‚Üí Set
(Œ± ‚äó·µ£ Œ≤) (u , v) (l‚ÇÅ , l‚ÇÇ) = (Œ± u l‚ÇÅ) √ó (Œ≤ v l‚ÇÇ)

_‚äó‚Çí_ : (A B : Obj‚ä§) ‚Üí Obj‚ä§
(U , unit , Œ±) ‚äó‚Çí (V , unit , Œ≤) = (U √ó V) , unit , (Œª p t ‚Üí (Œ± (fst p) triv) √ó (Œ≤ (snd p) triv))
(U , unit , Œ±) ‚äó‚Çí (V , mod , Œ≤) = (U √ó V) , (mod , (Œª p t ‚Üí (Œ± (fst p) triv) √ó (Œ≤ (snd p) t)))
(U , mod , Œ±) ‚äó‚Çí (V , unit , Œ≤) = (U √ó V) , (mod , (Œª p t ‚Üí (Œ± (fst p) t) √ó (Œ≤ (snd p) triv)))
(U , mod , Œ±) ‚äó‚Çí (V , mod , Œ≤) = (U √ó V) , (mod , (Œª p t ‚Üí (Œ± (fst p) t) √ó (Œ≤ (snd p) t)))

-- F‚äó : ‚àÄ{S Z W T V X U Y : Set ‚Ñì}{f : U ‚Üí W}{F : Z ‚Üí X}{g : V ‚Üí S}{G : T ‚Üí Y} ‚Üí (S ‚Üí Z) √ó (W ‚Üí T) ‚Üí (V ‚Üí X) √ó (U ‚Üí Y)
-- F‚äó {f = f}{F}{g}{G} (h‚ÇÅ , h‚ÇÇ) = (Œª v ‚Üí F(h‚ÇÅ (g v))) , (Œª u ‚Üí G(h‚ÇÇ (f u)))
  
-- _‚äó‚Çê_ : {A B C D : Obj} ‚Üí Hom A C ‚Üí Hom B D ‚Üí Hom (A ‚äó‚Çí B) (C ‚äó‚Çí D)
-- _‚äó‚Çê_ {(U , X , Œ±)}{(V , Y , Œ≤)}{(W , Z , Œ≥)}{(S , T , Œ¥)} (f , F , p‚ÇÅ) (g , G , p‚ÇÇ) = ‚ü® f , g ‚ü© , F‚äó {f = f}{F}{g}{G} , (Œª {u y} ‚Üí cond {u}{y})
--  where
--   cond : {u : Œ£ U (Œª x ‚Üí V)} {y : Œ£ (S ‚Üí Z) (Œª x ‚Üí W ‚Üí T)} ‚Üí
--       ((Œ± ‚äó·µ£ Œ≤) u (F‚äó {f = f}{F}{g}{G} y)) ‚â§L ((Œ≥ ‚äó·µ£ Œ¥) (‚ü® f , g ‚ü© u) y)
--   cond {u , v}{h , j} = l-mul-funct {p = mproset l-pf} (p‚ÇÅ {u}{h (g v)}) (p‚ÇÇ {v}{j (f u)})
  
-- ‚ñ°·µ£ : {U : Set}{X : UnitType} ‚Üí (U ‚Üí ‚ü¶ X ‚üß ‚Üí Set) ‚Üí U ‚Üí ùïÉ ‚ü¶ X ‚üß ‚Üí Set
-- ‚ñ°·µ£ Œ± u [] = ‚ä§
-- ‚ñ°·µ£ {U}{X} Œ± u (x :: l) = (Œ± u x) √ó (‚ñ°·µ£ {U}{X} Œ± u l)

-- ‚ñ°‚Çí : Obj‚ä§ ‚Üí Obj‚ä§
-- ‚ñ°‚Çí (U , X , Œ±) = U , seq X , ‚ñ°·µ£ {U}{X} Œ±

-- ‚ñ°‚Çê : {A B : Obj‚ä§} ‚Üí Hom‚ä§ A B ‚Üí Hom‚ä§ (‚ñ°‚Çí A) (‚ñ°‚Çí B)
-- ‚ñ°‚Çê {U , n‚ÇÅ , Œ±}{V , n‚ÇÇ , Œ≤} (f , F , p) = f , map F , {!!}
  
œÄ‚ÇÅ : {A B : Obj‚ä§} ‚Üí Hom‚ä§ (A ‚äó‚Çí B) A
œÄ‚ÇÅ {U , unit , Œ±} {V , unit , Œ≤} = fst , id-set , (Œª {u y} ‚Üí aux {u}{y})
 where
   aux : {u : Œ£ U (Œª x ‚Üí V)} {y : ‚ä§} ‚Üí Œ£ (Œ± (fst u) triv) (Œª x ‚Üí Œ≤ (snd u) triv) ‚Üí Œ± (fst u) y
   aux {u , v}{triv} = fst
   
œÄ‚ÇÅ {U , mod , Œ±} {V , unit , Œ≤} = fst , id-set , (Œª {u y} ‚Üí aux {u}{y})
 where
  aux : {u : Œ£ U (Œª x ‚Üí V)} {y : Œ£ (ùïÉ ‚ä§) (Œª x ‚Üí ùïÉ ‚ä§)} ‚Üí Œ£ (Œ± (fst u) y) (Œª x ‚Üí Œ≤ (snd u) triv) ‚Üí Œ± (fst u) y
  aux {u , v}{l‚ÇÅ , l‚ÇÇ} = fst
  
œÄ‚ÇÅ {U , unit , Œ±} {V , mod , Œ≤} = fst , (Œª x ‚Üí [ x ] , [ x ]) , (Œª {u y} ‚Üí aux {u}{y})
 where
   aux : {u : Œ£ U (Œª x ‚Üí V)} {y : ‚ä§} ‚Üí Œ£ (Œ± (fst u) triv) (Œª x ‚Üí Œ≤ (snd u) (y :: [] , y :: [])) ‚Üí Œ± (fst u) y
   aux {u , v}{triv} = fst

œÄ‚ÇÅ {U , mod , Œ±} {V , mod , Œ≤} = fst , id-set , (Œª {u y} ‚Üí aux {u}{y})
 where
   aux : {u : Œ£ U (Œª x ‚Üí V)} {y : Œ£ (ùïÉ ‚ä§) (Œª x ‚Üí ùïÉ ‚ä§)} ‚Üí Œ£ (Œ± (fst u) y) (Œª x ‚Üí Œ≤ (snd u) y) ‚Üí Œ± (fst u) y
   aux {u , v}{l} = fst

œÄ‚ÇÇ : {A B : Obj‚ä§} ‚Üí Hom‚ä§ (A ‚äó‚Çí B) B
œÄ‚ÇÇ {U , unit , Œ±} {V , unit , Œ≤} = snd , {!!} , {!!}
œÄ‚ÇÇ {U , mod , Œ±} {V , unit , Œ≤} = snd , {!!} , {!!}  
œÄ‚ÇÇ {U , unit , Œ±} {V , mod , Œ≤} = snd , {!!} , {!!}
œÄ‚ÇÇ {U , mod , Œ±} {V , mod , Œ≤} = snd , {!!} , {!!}

postulate rel-++ : ‚àÄ{W : Set}{w : W}{Œ≥  : W ‚Üí ùïÉ (‚ä§ {lzero}) ‚Üí Set}{l‚ÇÅ l‚ÇÇ : ùïÉ ‚ä§} ‚Üí Œ≥ w (l‚ÇÅ ++ l‚ÇÇ) ‚Üí ((Œ≥ w l‚ÇÅ) √ó (Œ≥ w l‚ÇÇ))

cart-ar : {A B C : Obj‚ä§}
  ‚Üí (f : Hom‚ä§ C A)
  ‚Üí (g : Hom‚ä§ C B)
  ‚Üí Hom‚ä§ C (A ‚äó‚Çí B)
cart-ar {U , unit , Œ±} {V , unit , Œ≤} {W , unit , Œ≥} (f , F , p‚ÇÅ) (g , G , p‚ÇÇ) = trans-√ó f g , id-set , (Œª {u y} ‚Üí aux {u}{y})
 where
   aux : {u : W} {y : ‚ä§} ‚Üí Œ≥ u y ‚Üí Œ£ (Œ± (f u) triv) (Œª x ‚Üí Œ≤ (g u) triv)
   aux {w}{triv} p with p‚ÇÅ {w}{triv} | p‚ÇÇ {w}{triv}
   ... | p‚ÇÉ | p‚ÇÑ with F triv | G triv
   ... | triv | triv = p‚ÇÉ p , p‚ÇÑ p

cart-ar {U , unit , Œ±} {V , unit , Œ≤} {W , mod , Œ≥} (f , F , p‚ÇÅ) (g , G , p‚ÇÇ) = trans-√ó f g , (Œª x ‚Üí (fst (F x)) ++ (snd (F x)) , (fst (G x)) ++ (snd (G x))) , {!!}

cart-ar {U , unit , Œ±} {V , mod , Œ≤} {W , unit , Œ≥} (f , F , p‚ÇÅ) (g , G , p‚ÇÇ) = trans-√ó f g , {!!} , {!!}

cart-ar {U , unit , Œ±} {V , mod , Œ≤} {W , mod , Œ≥} (f , F , p‚ÇÅ) (g , G , p‚ÇÇ) = trans-√ó f g , {!!} , {!!}

cart-ar {U , mod , Œ±} {V , unit , Œ≤} {W , unit , Œ≥} (f , F , p‚ÇÅ) (g , G , p‚ÇÇ) = trans-√ó f g , {!!} , {!!}

cart-ar {U , mod , Œ±} {V , unit , Œ≤} {W , mod , Œ≥} (f , F , p‚ÇÅ) (g , G , p‚ÇÇ) = trans-√ó f g , {!!} , {!!}
   
cart-ar {U , mod , Œ±} {V , mod , Œ≤} {W , unit , Œ≥} (f , F , p‚ÇÅ) (g , G , p‚ÇÇ) = trans-√ó f g , {!!} , {!!}
  
cart-ar {U , mod , Œ±} {V , mod , Œ≤} {W , mod , Œ≥} (f , F , p‚ÇÅ) (g , G , p‚ÇÇ) = trans-√ó f g , {!!} , {!!}
   
cart-diag‚ÇÅ : ‚àÄ{A B C : Obj‚ä§}
  ‚Üí {f : Hom‚ä§ C A}
  ‚Üí {g : Hom‚ä§ C B}
  ‚Üí (cart-ar f g) ‚óã‚ä§ œÄ‚ÇÅ ‚â°h‚ä§ f
cart-diag‚ÇÅ {U , unit , Œ±} {V , unit , Œ≤} {W , unit , Œ≥} {f , F , p‚ÇÅ} {g , G , p‚ÇÇ} = refl , {!!}
cart-diag‚ÇÅ {U , unit , Œ±} {V , unit , Œ≤} {W , mod , Œ≥} {f , F , p‚ÇÅ} {g , G , p‚ÇÇ} = refl , {!!}
cart-diag‚ÇÅ {U , unit , Œ±} {V , mod , Œ≤} {W , unit , Œ≥} {f , F , p‚ÇÅ} {g , G , p‚ÇÇ} = {!!}
cart-diag‚ÇÅ {U , unit , Œ±} {V , mod , Œ≤} {W , mod , Œ≥} {f , F , p‚ÇÅ} {g , G , p‚ÇÇ} = {!!}
cart-diag‚ÇÅ {U , mod , Œ±} {V , unit , Œ≤} {W , unit , Œ≥} {f , F , p‚ÇÅ} {g , G , p‚ÇÇ} = {!!}
cart-diag‚ÇÅ {U , mod , Œ±} {V , unit , Œ≤} {W , mod , Œ≥} {f , F , p‚ÇÅ} {g , G , p‚ÇÇ} = {!!}
cart-diag‚ÇÅ {U , mod , Œ±} {V , mod , Œ≤} {W , unit , Œ≥} {f , F , p‚ÇÅ} {g , G , p‚ÇÇ} = {!!}
cart-diag‚ÇÅ {U , mod , Œ±} {V , mod , Œ≤} {W , mod , Œ≥} {f , F , p‚ÇÅ} {g , G , p‚ÇÇ} = {!!}

-- cart-diag‚ÇÇ : ‚àÄ{A B C : Obj‚ä§}
--   ‚Üí {f : Hom (toObj C) (toObj A)}
--   ‚Üí {g : Hom (toObj C) (toObj B)}
--   ‚Üí (cart-ar f g) ‚óã œÄ‚ÇÇ ‚â°h g
-- cart-diag‚ÇÇ {U , Œ±}{V , Œ≤}{W , Œ≥}{f , F , p‚ÇÅ}{g , G , p‚ÇÇ} = refl , ext-set ctr
--  where
--    ctr : {a : ‚ä§} ‚Üí triv ‚â° G a
--    ctr {triv} with G triv
--    ... | triv = refl

-- ‚ñ°‚Çí-cond : ‚àÄ{U X : Set}
--   ‚Üí (U ‚Üí X ‚Üí Set)
--   ‚Üí U
--   ‚Üí (X *)
--   ‚Üí Set
-- ‚ñ°‚Çí-cond {U} Œ± u l = all-pred (Œ± u) l 

-- fromObj : (A : Obj) ‚Üí Œ£[ B ‚àà Obj‚ä§ ]( A ‚â° toObj(B)) ‚Üí Obj‚ä§
-- fromObj _ ((a , b) , b‚ÇÅ) = a , b 

-- ‚ñ°‚Çí : Obj ‚Üí Obj
-- ‚ñ°‚Çí (U , X , Œ±) = (U , X * , ‚ñ°‚Çí-cond Œ±)

-- ‚ñ°‚Çê : {A B : Obj} ‚Üí Hom A B ‚Üí Hom (‚ñ°‚Çí A) (‚ñ°‚Çí B)
-- ‚ñ°‚Çê {U , X , Œ±}{V , Y , Œ≤} (f , F , p) = f , map F , cond
--  where
--   cond : {u : U} {y : ùïÉ Y} ‚Üí all-pred (Œ± u) (map F y) ‚Üí all-pred (Œ≤ (f u)) y
--   cond {y = []} x = triv
--   cond {y = x :: y} (a , b) = p a , cond b

-- ‚ñ°-Œµ : ‚àÄ{A : Obj} ‚Üí Hom (‚ñ°‚Çí A) A
-- ‚ñ°-Œµ {U , X , Œ±} = id-set , (Œª x ‚Üí [ x ] ) , aux
--  where
--   aux : {u : U} {y : X} ‚Üí Œ£ (Œ± u y) (Œª x ‚Üí ‚ä§) ‚Üí Œ± u y
--   aux (a , b) = a

-- ‚ñ°-Œ¥ : ‚àÄ{A : Obj} ‚Üí Hom (‚ñ°‚Çí A) (‚ñ°‚Çí (‚ñ°‚Çí A))
-- ‚ñ°-Œ¥ {U , X , Œ±} = id-set , (foldr _++_ []) , cond
--  where
--    cond : {u : U} {y : ùïÉ (ùïÉ X)} ‚Üí all-pred (Œ± u) (foldr _++_ [] y) ‚Üí all-pred (Œª l ‚Üí all-pred (Œ± u) l) y
--    cond {y = []} p = triv
--    cond {u}{y = y :: y‚ÇÅ} p rewrite
--      (all-pred-append {X}{Œ± u}{y}{foldr _++_ [] y‚ÇÅ} ‚àß-unit ‚àß-assoc)
--      with p
--    ... | p‚ÇÅ , p‚ÇÇ = p‚ÇÅ , cond p‚ÇÇ

-- comonand-diag‚ÇÅ : ‚àÄ{A : Obj}
--   ‚Üí (‚ñ°-Œ¥ {A}) ‚óã (‚ñ°‚Çê (‚ñ°-Œ¥ {A})) ‚â°h (‚ñ°-Œ¥ {A}) ‚óã (‚ñ°-Œ¥ { ‚ñ°‚Çí (A)})
-- comonand-diag‚ÇÅ {U , X , Œ±} = refl , ext-set (Œª {a} ‚Üí ctr {a})
--  where
--   ctr : {a : ùïÉ (ùïÉ (ùïÉ X))} ‚Üí foldr _++_ [] (map (foldr _++_ []) a) ‚â° foldr _++_ [] (foldr _++_ [] a)
--   ctr {[]} = refl
--   ctr {a :: a‚ÇÅ} rewrite sym (foldr-append {l‚ÇÅ = a}{foldr _++_ [] a‚ÇÅ}) | ctr {a‚ÇÅ} = refl

-- comonand-diag‚ÇÇ : ‚àÄ{A : Obj}
--   ‚Üí (‚ñ°-Œ¥ {A}) ‚óã (‚ñ°-Œµ { ‚ñ°‚Çí A}) ‚â°h (‚ñ°-Œ¥ {A}) ‚óã (‚ñ°‚Çê (‚ñ°-Œµ {A}))
-- comonand-diag‚ÇÇ {U , X , Œ±} = refl , ext-set (Œª {a} ‚Üí cond {a})
--  where
--    cond : {a : ùïÉ X} ‚Üí a ++ [] ‚â° foldr _++_ [] (map (Œª x ‚Üí x :: []) a)
--    cond {a} rewrite ++[] a = foldr-map

-- ‚ñ°-ctr : {U V : Set} ‚Üí ùïÉ (Œ£ (V ‚Üí ‚ä§) (Œª x ‚Üí U ‚Üí ‚ä§)) ‚Üí Œ£ (V ‚Üí ùïÉ ‚ä§) (Œª x ‚Üí U ‚Üí ùïÉ ‚ä§)
-- ‚ñ°-ctr [] = (Œª x ‚Üí [ triv ]) , (Œª x ‚Üí [ triv ])
-- ‚ñ°-ctr ((a , b) :: l) = (Œª v ‚Üí a v :: (fst (‚ñ°-ctr l)) v) , (Œª u ‚Üí b u :: (snd (‚ñ°-ctr l)) u)
  
-- ‚ñ°-m : {A B : Obj‚ä§} ‚Üí Hom ((‚ñ°‚Çí (toObj A)) ‚äó‚Çí (‚ñ°‚Çí (toObj B))) (‚ñ°‚Çí ((toObj A) ‚äó‚Çí (toObj B)))
-- ‚ñ°-m {U , Œ±}{V , Œ≤} = id-set , ‚ñ°-ctr , cond
--  where  
--   cond : {u : Œ£ U (Œª x ‚Üí V)} {y : ùïÉ (Œ£ (V ‚Üí ‚ä§) (Œª x ‚Üí U ‚Üí ‚ä§))} ‚Üí
--       ((Œª u‚ÇÅ l ‚Üí all-pred (Œ± u‚ÇÅ) l) ‚äó·µ£ (Œª u‚ÇÅ l ‚Üí all-pred (Œ≤ u‚ÇÅ) l)) u
--       (‚ñ°-ctr y) ‚Üí all-pred ((Œ± ‚äó·µ£ Œ≤) u) y
--   cond {a , b} {[]} x = triv
--   cond {a , b} {(a‚ÇÅ , b‚ÇÅ) :: y} ((a‚ÇÇ , b‚ÇÇ) , a‚ÇÉ , b‚ÇÉ) with cond {a , b}{y}
--   ... | IH with ‚ñ°-ctr y
--   ... | c , d = (a‚ÇÇ , a‚ÇÉ) , IH (b‚ÇÇ , b‚ÇÉ)

-- ‚ñ°-m-nat : ‚àÄ{A A' B B' : Obj‚ä§}
--   ‚Üí (f : Hom (toObj A) (toObj A'))
--   ‚Üí (g : Hom (toObj B) (toObj B'))
--   ‚Üí ((‚ñ°‚Çê f) ‚äó‚Çê (‚ñ°‚Çê g)) ‚óã ‚ñ°-m ‚â°h ‚ñ°-m ‚óã (‚ñ°‚Çê (f ‚äó‚Çê g))
-- ‚ñ°-m-nat {U , Œ±}{U' , Œ±'}{V , Œ≤}{V' , Œ≤'} (f , F , p‚ÇÅ) (g , G , p‚ÇÇ) = refl , ext-set (Œª {a} ‚Üí aux {a})
--   where
--     aux : {a : ùïÉ (Œ£ (V' ‚Üí ‚ä§) (Œª x ‚Üí U' ‚Üí ‚ä§))} ‚Üí F‚äó {V'}{ùïÉ ‚ä§}{U'}{ùïÉ ‚ä§}{V}{ùïÉ ‚ä§}{U}{ùïÉ ‚ä§}{f}{map F}{g}{map G} (‚ñ°-ctr a) ‚â° ‚ñ°-ctr (map (F‚äó {V'} {‚ä§} {U'} {‚ä§} {V} {‚ä§} {U} {‚ä§} {f} {F} {g} {G}) a)
--     aux {[]} with G triv | F triv
--     ... | triv | triv = refl
--     aux {(a , b) :: a‚ÇÅ} = eq-√ó (ext-set aux‚ÇÅ) (ext-set aux‚ÇÑ)
--      where
--        aux‚ÇÇ : ‚àÄ{v}{l : ùïÉ (Œ£ (V' ‚Üí ‚ä§) (Œª x ‚Üí U' ‚Üí ‚ä§))} ‚Üí map F (fst (‚ñ°-ctr l) (g v)) ‚â° fst (‚ñ°-ctr (map (F‚äó {V'} {‚ä§} {U'} {‚ä§} {V} {‚ä§} {U} {‚ä§} {f} {F} {g} {G}) l)) v
--        aux‚ÇÇ {_}{[]} with F triv
--        ... | triv = refl
--        aux‚ÇÇ {v}{(a‚ÇÇ , b‚ÇÅ) :: l} rewrite aux‚ÇÇ {v}{l} = refl
         
--        aux‚ÇÅ : {a‚ÇÇ : V} ‚Üí F (a (g a‚ÇÇ)) :: map F (fst (‚ñ°-ctr a‚ÇÅ) (g a‚ÇÇ)) ‚â° F (a (g a‚ÇÇ)) :: fst (‚ñ°-ctr (map (F‚äó {V'} {‚ä§} {U'} {‚ä§} {V} {‚ä§} {U} {‚ä§} {f} {F} {g} {G}) a‚ÇÅ)) a‚ÇÇ
--        aux‚ÇÅ {v} with F (a (g v))
--        ... | triv rewrite aux‚ÇÇ {v}{a‚ÇÅ} = refl

--        aux‚ÇÉ : ‚àÄ{u l} ‚Üí map G (snd (‚ñ°-ctr l) (f u)) ‚â° snd (‚ñ°-ctr (map (F‚äó {V'} {‚ä§} {U'} {‚ä§} {V} {‚ä§} {U} {‚ä§} {f} {F} {g} {G}) l)) u
--        aux‚ÇÉ {u}{[]} with G triv
--        ... | triv = refl
--        aux‚ÇÉ {u}{(a‚ÇÇ , b‚ÇÅ) :: l} rewrite aux‚ÇÉ {u}{l} = refl

--        aux‚ÇÑ : {a‚ÇÇ : U} ‚Üí G (b (f a‚ÇÇ)) :: map G (snd (‚ñ°-ctr a‚ÇÅ) (f a‚ÇÇ)) ‚â° G (b (f a‚ÇÇ)) :: snd (‚ñ°-ctr (map (F‚äó {V'} {‚ä§} {U'} {‚ä§} {V} {‚ä§} {U} {‚ä§} {f} {F} {g} {G}) a‚ÇÅ)) a‚ÇÇ
--        aux‚ÇÑ {u} rewrite aux‚ÇÉ {u}{a‚ÇÅ} = refl
       
-- ‚ñ°-m-I : Hom I (‚ñ°‚Çí I)
-- ‚ñ°-m-I = id-set , (Œª _ ‚Üí triv) , cond
--  where
--   cond : {u : ‚ä§} {y : ùïÉ ‚ä§} ‚Üí Œπ u triv ‚Üí all-pred (Œπ u) y
--   cond {triv} {[]} x = triv
--   cond {triv} {triv :: y} triv = triv , cond triv

-- œÄ-‚ñ°-ctr : {U V : Set} ‚Üí ùïÉ ‚ä§ ‚Üí Œ£ (V ‚Üí ùïÉ ‚ä§) (Œª _ ‚Üí U ‚Üí ùïÉ ‚ä§)
-- œÄ-‚ñ°-ctr [] = (Œª x ‚Üí [ triv ]) , (Œª x ‚Üí [ triv ])
-- œÄ-‚ñ°-ctr {U}{V} (triv :: l) = (Œª v ‚Üí triv :: fst (œÄ-‚ñ°-ctr {U}{V} l) v) , ((Œª v ‚Üí triv :: snd (œÄ-‚ñ°-ctr {U}{V} l) v))

-- œÄ‚ÇÅ-‚ñ° : ‚àÄ{U Œ± V Œ≤} ‚Üí Hom ((‚ñ°‚Çí (U , ‚ä§ , Œ±)) ‚äó‚Çí (‚ñ°‚Çí (V , ‚ä§ , Œ≤))) (‚ñ°‚Çí (U , ‚ä§ , Œ±))
-- œÄ‚ÇÅ-‚ñ° {U}{Œ±}{V}{Œ≤} = fst , œÄ-‚ñ°-ctr , cond
--  where
--    cond : {u : Œ£ U (Œª x ‚Üí V)} {y : ùïÉ ‚ä§} ‚Üí
--       ((Œª u‚ÇÅ l ‚Üí all-pred (Œ± u‚ÇÅ) l) ‚äó·µ£ (Œª u‚ÇÅ l ‚Üí all-pred (Œ≤ u‚ÇÅ) l)) u
--       (œÄ-‚ñ°-ctr y) ‚Üí
--       all-pred (Œ± (fst u)) y
--    cond {a , b} {[]} x = triv
--    cond {a , b} {triv :: y} ((a‚ÇÅ , b‚ÇÅ) , a‚ÇÇ , b‚ÇÇ) with cond {a , b} {y}
--    ... | IH with œÄ-‚ñ°-ctr {U}{V} y
--    ... | c , d = a‚ÇÅ , IH (b‚ÇÅ , b‚ÇÇ)
   
-- ‚ñ°-prod‚ÇÅ : ‚àÄ{U Œ± V Œ≤} ‚Üí _‚â°h_ {((‚ñ°‚Çí (U , ‚ä§ , Œ±)) ‚äó‚Çí (‚ñ°‚Çí (V , ‚ä§ , Œ≤)))}
--                             {(‚ñ°‚Çí (U , ‚ä§ , Œ±))}
--                             (_‚óã_ {(‚ñ°‚Çí (U , ‚ä§ , Œ±)) ‚äó‚Çí (‚ñ°‚Çí (V , ‚ä§ , Œ≤))}{‚ñ°‚Çí ((U , ‚ä§ , Œ±) ‚äó‚Çí (V , ‚ä§ , Œ≤))}{‚ñ°‚Çí (U , ‚ä§ , Œ±)} (‚ñ°-m {U , Œ±}{V , Œ≤}) (‚ñ°‚Çê {(U , ‚ä§ , Œ±) ‚äó‚Çí (V , ‚ä§ , Œ≤)}{U , ‚ä§ , Œ±} (œÄ‚ÇÅ {U , Œ±}{V , Œ≤})))
--                             (œÄ‚ÇÅ-‚ñ° {U}{Œ±}{V}{Œ≤})
-- ‚ñ°-prod‚ÇÅ {U}{Œ±}{V}{Œ≤} = refl , ext-set (Œª {a} ‚Üí aux {a})
--  where
--   aux : {a : ùïÉ ‚ä§} ‚Üí ‚ñ°-ctr {U}{V} (map œÄ-ctr a) ‚â° œÄ-‚ñ°-ctr a
--   aux {[]} = refl
--   aux {triv :: a} rewrite aux {a} = refl

-- œÄ‚ÇÇ-‚ñ° : ‚àÄ{U Œ± V Œ≤} ‚Üí Hom ((‚ñ°‚Çí (U , ‚ä§ , Œ±)) ‚äó‚Çí (‚ñ°‚Çí (V , ‚ä§ , Œ≤))) (‚ñ°‚Çí (V , ‚ä§ , Œ≤))
-- œÄ‚ÇÇ-‚ñ° {U}{Œ±}{V}{Œ≤} = snd , œÄ-‚ñ°-ctr , cond
--  where
--    cond : {u : Œ£ U (Œª x ‚Üí V)} {y : ùïÉ ‚ä§} ‚Üí
--       ((Œª u‚ÇÅ l ‚Üí all-pred (Œ± u‚ÇÅ) l) ‚äó·µ£ (Œª u‚ÇÅ l ‚Üí all-pred (Œ≤ u‚ÇÅ) l)) u
--       (œÄ-‚ñ°-ctr y) ‚Üí
--       all-pred (Œ≤ (snd u)) y
--    cond {a , b} {[]} x = triv
--    cond {a , b} {triv :: y} ((a‚ÇÅ , b‚ÇÅ) , a‚ÇÇ , b‚ÇÇ) with cond {a , b}{y}
--    ... | IH with œÄ-‚ñ°-ctr {U}{V} y
--    ... | c , d = a‚ÇÇ , (IH (b‚ÇÅ , b‚ÇÇ))

-- ‚ñ°-prod‚ÇÇ : ‚àÄ{U Œ± V Œ≤} ‚Üí _‚â°h_ {((‚ñ°‚Çí (U , ‚ä§ , Œ±)) ‚äó‚Çí (‚ñ°‚Çí (V , ‚ä§ , Œ≤)))}
--                             {(‚ñ°‚Çí (V , ‚ä§ , Œ≤))}
--                             (_‚óã_ {(‚ñ°‚Çí (U , ‚ä§ , Œ±)) ‚äó‚Çí (‚ñ°‚Çí (V , ‚ä§ , Œ≤))}{‚ñ°‚Çí ((U , ‚ä§ , Œ±) ‚äó‚Çí (V , ‚ä§ , Œ≤))}{‚ñ°‚Çí (V , ‚ä§ , Œ≤)} (‚ñ°-m {U , Œ±}{V , Œ≤}) (‚ñ°‚Çê {(U , ‚ä§ , Œ±) ‚äó‚Çí (V , ‚ä§ , Œ≤)}{V , ‚ä§ , Œ≤} (œÄ‚ÇÇ {U , Œ±}{V , Œ≤})))
--                             (œÄ‚ÇÇ-‚ñ° {U}{Œ±}{V}{Œ≤})
-- ‚ñ°-prod‚ÇÇ {U}{Œ±}{V}{Œ≤} = refl , (ext-set (Œª {a} ‚Üí aux {a}))
--  where
--   aux : {a : ùïÉ ‚ä§} ‚Üí ‚ñ°-ctr {U}{V} (map œÄ-ctr a) ‚â° œÄ-‚ñ°-ctr a
--   aux {[]} = refl
--   aux {triv :: a} rewrite aux {a} = refl

-- cart-ar-‚ñ° : {A B C : Obj‚ä§}
--   ‚Üí (f : Hom (‚ñ°‚Çí (toObj C)) (‚ñ°‚Çí (toObj A)))
--   ‚Üí (g : Hom (‚ñ°‚Çí (toObj C)) (‚ñ°‚Çí (toObj B)))
--   ‚Üí Hom (‚ñ°‚Çí (toObj C)) ((‚ñ°‚Çí (toObj A)) ‚äó‚Çí (‚ñ°‚Çí (toObj B)))
-- cart-ar-‚ñ° {U , Œ±}{V , Œ≤}{W , Œ≥} (f , F , p‚ÇÅ) (g , G , p‚ÇÇ) = trans-√ó f g ,  {!!} , {!!}
--  where
   
-- -}
